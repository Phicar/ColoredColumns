
# This file was *autogenerated* from the file PartitionsNonConsecutive.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_2p0 = RealNumber('2.0'); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_5 = Integer(5)
def tal2(n):
	s=_sage_const_0 
	nn = n//_sage_const_2 
	mm = ceil(n/_sage_const_2p0 )
	for p in SetPartitions(nn):
		for q in SetPartitions(mm):
			pq = []
			for x in p:
				ss = []
				for a in x:
					ss.append(_sage_const_2 *a)
				pq.append(ss)
			for y in q:
				ss = []
				for a in y:
					ss.append(_sage_const_2 *a+_sage_const_1 )
				pq.append(ss)
			spq = SetPartition(pq)
			if spq.is_noncrossing():
				s+=_sage_const_1 
	return s
			
def tal(n):
	s =_sage_const_0 
	for p in SetPartitions(n):
		if not p.is_noncrossing():
			continue
		paila = _sage_const_0 
		for x in p:
			if paila ==_sage_const_1 :
				break
			l = -_sage_const_1 
			for a in x:
				if l==-_sage_const_1 :
					l = a%_sage_const_2 
				if paila==_sage_const_1 :
					break
				#print(l,a)
				if l!=-_sage_const_1  and a%_sage_const_2 !=l:
					paila = _sage_const_1 
					break
		if paila==_sage_const_0 :
			print(p,paila)
			s+=_sage_const_1 
	return s
for n in srange(_sage_const_1 ,_sage_const_5 ):
	print(n,tal(n)) #bell_number(ceil(n/2))*bell_number(floor(n/2)))

