
# This file was *autogenerated* from the file ColoredColumns.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_2p0 = RealNumber('2.0'); _sage_const_20 = Integer(20)
pp=[]
L=[]
LL= []
ss =_sage_const_0 
kk =_sage_const_0 
nn=_sage_const_0 
bk = _sage_const_0 
def go(a):
	global LL,pp,ss,kk,nn,bk
	if a==bk:
		paila = False
		for i in range(_sage_const_0 ,nn-_sage_const_1 ):
			#print(LL[i],LL[i+1])
			if LL[i]==LL[i+_sage_const_1 ]:
				paila = True
				break
		if not paila:
			#print(pp,LL)
			ss+=_sage_const_1 
		return
	for i in range(_sage_const_0 ,kk):
		for x in pp[a]:
			LL[x-_sage_const_1 ]=i
		go(a+_sage_const_1 )
def tal(n,co):
	tot = _sage_const_0 
	global pp,L,LL,ss,kk,bk,nn
	P = SetPartitions(n)
	nn = n
	kk = co
	for p in P:
		if not p.is_noncrossing():
			continue
		L = [_sage_const_0  for i in range(n)]
		k = _sage_const_0 
		bk = len(p)
		pp =p
		for b in p:
			k+=_sage_const_1 
			for x in b:
				L[x-_sage_const_1 ]=k-_sage_const_1 
		paila = False
		for i in range(n-_sage_const_1 ):
			if L[i]==L[i+_sage_const_1 ]:
				paila = True
				break
		if not paila:
			ss =_sage_const_0 
			LL = [-_sage_const_1  for i in range(n)]
			go(_sage_const_0 )
			tot+=ss
	return tot
def A(n):
        return binomial(n+floor(n/_sage_const_2p0 ),ceil(n/_sage_const_2p0 ))/(_sage_const_2 *floor(n/_sage_const_2p0 )+_sage_const_1 )
def Col(n,k):
	s = _sage_const_0 
	for l in range(_sage_const_1 ,n+_sage_const_1 ):
		s+=binomial(n-_sage_const_1 ,l-_sage_const_1 )*tal(l,k)
	return s
def Col2(n): # number of columns n, two colors.
        s =_sage_const_0 
        for l in range(_sage_const_1 ,n+_sage_const_1 ):
                s+=binomial(n-_sage_const_1 ,l-_sage_const_1 )*A(l)
        return _sage_const_2 *s
def Up(n,kk):
	s = _sage_const_0 
	for l in range(_sage_const_1 ,n+_sage_const_1 ):
		for k in range(_sage_const_1 ,l+_sage_const_1 ):
			s+=binomial(n-_sage_const_1 ,l-_sage_const_1 )*binomial(l,k)*binomial(l,k-_sage_const_1 )*(kk-_sage_const_1 )**k/l
	return kk*s
def Low(n,kk):
	s = _sage_const_0 
	for l in range(_sage_const_1 ,n+_sage_const_1 ):
		s+=binomial(n-_sage_const_1 ,l-_sage_const_1 )*catalan_number(l)
	return s*kl
kl = _sage_const_5 
for n in range(_sage_const_1 ,_sage_const_20 ):
	t = Col(n,kl)
	print(Low(n,kl)/kl,t/kl,Up(n,kl)/kl)
##Brute force of columns, Up is upper bound.

